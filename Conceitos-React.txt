/public - index.html: sempre que uma página é iniciada
ela é iniciada nesse arquivo, é um arquivo html simples, 
onde a parte mais importante é a <div id="root">, nesse
arquivo é onde todos os nossos Componentes são carregados.

/src - index.js - saindo do index o React irá carregar
esse arquivo, onde será renderizado o <App> (que é um
componente) dentro daquela <div id="root">.

/src - App.js - o elemento render() irá carregar os elementos
que a gente quer que apareça na tela, o que a gente vê
nessa parte que é bem parecida com HTML na verdade é o 
que chamamos de JSX, a maior diferença que temos é que 
ao invés de definirmos 'class' para nossas classes iremos
utilizar 'className', pois o 'class' no React é uma palavra
reservada e apenas para não haver confunsão optou-se por
utilizar essa notação.


JSX - O que parece ser um HTML dentro do método render, é na verdade JSX, um sintatic sugar para a API do React.
As principais diferenças no dia a dia entre HTML e JSX são:
- O class do html passa a se chamar className, porque o termo class é uma palavra reservada no Javascript;
- O conteúdo que estiver entre chaves {}, será interpretado como Javascript;
<script> </script> -->> {}



component - Components nada mais do que blocos/partes da sua aplicação, como se fossem peças do conjunto total
do seu App, cada Components é um pedaço do todo e você pode desenvolver cada um desses "pedaços" e no fim ir
aclopando, muito bom para manutenção  e reaproveitamento de código;

props - As prop são atributos, por exemplo em um "<button type="button"/>" o typy será uma props da target/tag
button;

state - O state tem por objetivo guardar os estados de sua aplicação, por estado entende-se que é algo que 
está ou não ativado, true ou false, valore inicias de um campo, sempre captando aquele valor para fazer
alguma modificação;

Arrow Functions - forma mais simples de escrever uma função
Antigamente : function() {}
Arrow Functions : () => {}

Link para conceito de Arrow functions:
https://hcode.com.br/blog/entendendo-arrow-functions-de-uma-vez-por-todas

bind - toda função javascript possui esse método que tem, de modo geral, função de resgatar
um valor que vai sendo modificado ao longo da aplicação

Link para o conceito de Bind:
https://tableless.com.br/explorando-metodo-bind-em-javascript/


Literals js - É uma forma mais simples de escrever sentenças em JavaScript, exemplo:
Sem literals: const mensagem = "O valor do desconto é: " + (preco - (preco * desconto))
Com literals: const mensagem = `O valor do desconto é: ${(preco - (preco * desconto))}`

Link para mais detalhes do conceito de Literals:

https://www.devmedia.com.br/javascript-template-literals/41193


API - Application Programming Interface, Interface de Programação de Aplicativos
quando você desenvolve algum software que pode ser usado por outros softwares
e deseja disponibilizá-lo para todos você cria uma API, por exemplo, a API de 
GPS que é utilizada por muitas outras aplicações

Link para entender o que é uma API:
https://canaltech.com.br/software/o-que-e-api/

Link para a API de Conversão usada na aula:
https://free.currconv.com/api/v7/convert?apiKey=do-not-use-this-key&q=USD_BRL&compact=y



fetch - link para entender melhor a API fetch: 
https://developer.mozilla.org/pt-BR/docs/Web/API/Fetch_API/Using_Fetch

